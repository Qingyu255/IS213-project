services:
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:3000" # Expose the Next.js frontend on localhost:3000
    env_file:
      - .env
    environment:
      NODE_ENV: "development"
      NEXT_PUBLIC_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID}
      NEXT_PUBLIC_USER_POOL_CLIENT_ID: ${AWS_COGNITO_APP_CLIENT_ID}
      NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      NEXT_PUBLIC_USER_MANAGEMENT_SERVICE_API_BASE_URL: ${USER_MANAGEMENT_SERVICE_API_BASE_URL}
    volumes:
      - ./frontend:/app # Mount source code for hot reloading
    networks:
      - default

  postgres:
    image: postgres:16.2
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p 5432 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1s
      timeout: 10s
      retries: 10

  db-migrations:
    image: flyway/flyway:11.3.4
    volumes:
      - ./database/migrations:/flyway/sql
    environment:
      FLYWAY_URL: "jdbc:postgresql://postgres:5432/${POSTGRES_DB}"
      FLYWAY_USER: ${POSTGRES_USER}
      FLYWAY_PASSWORD: ${POSTGRES_PASSWORD}
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    command: migrate
    depends_on:
      postgres:
        condition: service_healthy

  user-management-service:
    build:
      context: ./services/userManagementService
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    environment:
      ConnectionStrings__PostgresDbConnectionString: "Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      ASPNETCORE_ENVIRONMENT: "Development"
      AWS_COGNITO_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_COGNITO_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID}
      AWS_COGNITO_APP_CLIENT_ID: ${AWS_COGNITO_APP_CLIENT_ID}
    depends_on:
      postgres:
        condition: service_healthy

  # example-spring-service:
  #   build:
  #     context: ./services/exampleSpringService
  #   container_name: example-spring-service
  #   ports:
  #     - "8080:8080" # Expose the Spring service on localhost:8080; change port accordingly for your service
  #   networks:
  #     - default

  # example-flask-service:
  #   build:
  #     context: ./services/exampleFlaskService
  #   container_name: example-flask-service
  #   ports:
  #     - "5000:5000" # Expose the Flask service on localhost:5000; change port accodingly for your service
  #   depends_on:
  #     - example-spring-service # Ensure the example-spring-service is up before flask tries to connect
  #   volumes:
  #     - ./services/exampleFlaskService:/app # Mount only the Flask service directory
  #   networks:
  #     - default

volumes:
  pgdata:

networks:
  default:
    name: IS213-project-default
