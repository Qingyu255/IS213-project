services:
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:3000" # Expose the Next.js frontend on localhost:3000
    env_file:
      - .env
    environment:
      NODE_ENV: "development"
      NEXT_PUBLIC_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID}
      NEXT_PUBLIC_USER_POOL_CLIENT_ID: ${AWS_COGNITO_APP_CLIENT_ID}
      NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      NEXT_PUBLIC_USER_MANAGEMENT_SERVICE_API_BASE_URL: ${USER_MANAGEMENT_SERVICE_API_BASE_URL}
      NEXT_PUBLIC_BOOKING_SERVICE_URL: ${BOOKING_SERVICE_URL}
    volumes:
      - ./frontend:/app # Mount source code for hot reloading
      - /app/node_modules # Preserve container node_modules
    networks:
      - default

  users-db:
    container_name: users-db
    image: postgres:16.2
    environment:
      POSTGRES_DB: ${USERS_DB}
      POSTGRES_USER: ${USERS_DB_USER}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
    env_file:
      - .env
    ports:
      - "5433:5432"
    volumes:
      - users-db-data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -p 5432 -U ${USERS_DB_USER} -d ${USERS_DB}"]
      interval: 1s
      timeout: 10s
      retries: 10
    networks:
      - default

  # Ticket Management Database
  ticket-db:
    image: postgres:16.2
    container_name: ticket-management-db
    environment:
      POSTGRES_DB: ${TICKET_DB}
      POSTGRES_USER: ${TICKET_DB_USER}
      POSTGRES_PASSWORD: ${TICKET_DB_PASSWORD}
    env_file:
      - .env
    ports:
      - "5434:5432"
    volumes:
      - ticket-db-data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -p 5432 -U ${TICKET_DB_USER} -d ${TICKET_DB}"]
      interval: 1s
      timeout: 10s
      retries: 10
    networks:
      - default

  # Logging Service Database
  logging-db:
    image: postgres:16.2
    container_name: logging-db
    environment:
      POSTGRES_DB: ${LOGGING_DB}
      POSTGRES_USER: ${LOGGING_DB_USER}
      POSTGRES_PASSWORD: ${LOGGING_DB_PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - logging-db-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -p 5432 -U ${LOGGING_DB_USER} -d ${LOGGING_DB}",
        ]
      interval: 1s
      timeout: 10s
      retries: 10
    networks:
      - default

  # Events Service Database
  events-db:
    image: postgres:16.2
    container_name: events-db
    environment:
      POSTGRES_DB: ${EVENTS_DB}
      POSTGRES_USER: ${EVENTS_DB_USER}
      POSTGRES_PASSWORD: ${EVENTS_DB_PASSWORD}
    ports:
      - "5436:5432"
    volumes:
      - events-db-data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -p 5432 -U ${EVENTS_DB_USER} -d ${EVENTS_DB}"]
      interval: 1s
      timeout: 10s
      retries: 10
    networks:
      - default

  # Billing Service Database
  billing-db:
    image: postgres:16.2
    container_name: billing-db
    environment:
      POSTGRES_DB: ${BILLING_DB}
      POSTGRES_USER: ${BILLING_DB_USER}
      POSTGRES_PASSWORD: ${BILLING_DB_PASSWORD}
    ports:
      - "5437:5432"
    volumes:
      - billing-db-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -p 5432 -U ${BILLING_DB_USER} -d ${BILLING_DB}",
        ]
      interval: 1s
      timeout: 10s
      retries: 10
    networks:
      - default

  users-db-migrations:
    image: flyway/flyway:11.3.4
    volumes:
      - ./services/userManagementService/database/migrations:/flyway/sql
    environment:
      FLYWAY_URL: "jdbc:postgresql://users-db:5432/${USERS_DB}"
      FLYWAY_USER: ${USERS_DB_USER}
      FLYWAY_PASSWORD: ${USERS_DB_PASSWORD}
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    command: migrate
    depends_on:
      users-db:
        condition: service_healthy

  ticket-db-migrations:
    image: flyway/flyway:11.3.4
    volumes:
      - ./services/ticketManagementService/database/migrations:/flyway/sql
    environment:
      FLYWAY_URL: "jdbc:postgresql://ticket-db:5432/${TICKET_DB}"
      FLYWAY_USER: ${TICKET_DB_USER}
      FLYWAY_PASSWORD: ${TICKET_DB_PASSWORD}
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    command: migrate
    depends_on:
      ticket-db:
        condition: service_healthy

  #logging service flyway migrations
  logging-db-migrations:
    image: flyway/flyway:11.3.4
    container_name: logging-db-migrations
    volumes:
      - ./services/loggingService/database/migrations:/flyway/sql
    environment:
      FLYWAY_URL: "jdbc:postgresql://logging-db:5432/${LOGGING_DB}"
      FLYWAY_USER: ${LOGGING_DB_USER}
      FLYWAY_PASSWORD: ${LOGGING_DB_PASSWORD}
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    command: migrate
    depends_on:
      logging-db:
        condition: service_healthy

  events-db-migrations:
    image: flyway/flyway:11.3.4
    container_name: events-db-migrations
    volumes:
      - ./services/eventsService/database/migrations:/flyway/sql
    environment:
      FLYWAY_URL: "jdbc:postgresql://events-db:5432/${EVENTS_DB}"
      FLYWAY_USER: ${EVENTS_DB_USER}
      FLYWAY_PASSWORD: ${EVENTS_DB_PASSWORD}
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    command: migrate
    depends_on:
      events-db:
        condition: service_healthy

  # Billing service flyway migrations
  billing-db-migrations:
    image: flyway/flyway:11.3.4
    container_name: billing-db-migrations
    volumes:
      - ./services/billingService/database/migrations:/flyway/sql
    environment:
      FLYWAY_URL: "jdbc:postgresql://billing-db:5432/${BILLING_DB}"
      FLYWAY_USER: ${BILLING_DB_USER}
      FLYWAY_PASSWORD: ${BILLING_DB_PASSWORD}
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    command: migrate
    depends_on:
      billing-db:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    container_name: logging_rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_ERLANG_COOKIE: "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      default:
        aliases:
          - rabbitmq

  user-management-service:
    container_name: user-management-service
    build:
      context: ./services/userManagementService
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    environment:
      ConnectionStrings__PostgresDbConnectionString: "Host=users-db;Database=${USERS_DB};Username=${USERS_DB_USER};Password=${USERS_DB_PASSWORD}"
      ASPNETCORE_ENVIRONMENT: "Development"
      AWS_COGNITO_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_COGNITO_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID}
      AWS_COGNITO_APP_CLIENT_ID: ${AWS_COGNITO_APP_CLIENT_ID}
    depends_on:
      users-db:
        condition: service_healthy

  ticket-management-service:
    build:
      context: ./services/ticketManagementService
      dockerfile: Dockerfile
    container_name: ticket-management-service
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${TICKET_DB_USER}:${TICKET_DB_PASSWORD}@ticket-db:5432/${TICKET_DB}
      AWS_COGNITO_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_COGNITO_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID}
      AWS_COGNITO_APP_CLIENT_ID: ${AWS_COGNITO_APP_CLIENT_ID}
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOST}:5672/
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
    depends_on:
      ticket-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  logging-service:
    build: ./services/loggingService
    container_name: logging-service
    restart: always
    depends_on:
      logging-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "9000:9000"
    environment:
      AWS_COGNITO_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_COGNITO_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID}
      AWS_COGNITO_APP_CLIENT_ID: ${AWS_COGNITO_APP_CLIENT_ID}

  events-service:
    container_name: events-service
    build:
      context: ./services/eventsService
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${EVENTS_DB_USER}:${EVENTS_DB_PASSWORD}@events-db:5432/${EVENTS_DB}
      AWS_COGNITO_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_COGNITO_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID}
      AWS_COGNITO_APP_CLIENT_ID: ${AWS_COGNITO_APP_CLIENT_ID}
    depends_on:
      events-db:
        condition: service_healthy

  create-event-service:
    build:
      context: ./services/createEventService
      dockerfile: Dockerfile
    container_name: create-event-service
    ports:
      - "8070:8070"
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
    depends_on:
      rabbitmq:
        condition: service_healthy

  billing-service:
    build:
      context: ./services/billingService
      dockerfile: Dockerfile
    container_name: billing-service
    restart: always
    ports:
      - "5001:5001"
      - "9101:9101"
    env_file:
      - .env
    environment:
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      EVENT_SERVICE_URL: "${EVENT_SERVICE_URL}"
      DATABASE_URL: "postgresql://${BILLING_DB_USER}:${BILLING_DB_PASSWORD}@billing-db:5432/${BILLING_DB}"
      FLASK_ENV: "development"
      FRONTEND_URL: "${FRONTEND_URL}"
      METRICS_PORT: "9101"
      BOOKING_SERVICE_URL: http://booking-service:8002
    volumes:
      - ./services/billingService:/app # Mount source code for development
      - /app/__pycache__
      - /app/services/__pycache__
      - /app/routes/__pycache__
    depends_on:
      events-service:
        condition: service_started
      billing-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - default

  refund-composite-service:
    build:
      context: ./services/refundService
      dockerfile: Dockerfile
    container_name: refund-composite-service
    ports:
      - "8880:8880"
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy

  # Stripe CLI service for webhook forwarding
  stripe-cli:
    image: stripe/stripe-cli:latest
    container_name: stripe-cli
    command: listen --api-key ${STRIPE_SECRET_KEY} --forward-to http://localhost:5001/api/webhook/
    env_file:
      - .env
    depends_on:
      - billing-service
    network_mode: "host" # Use host network to access localhost services

  booking-service:
    build:
      context: ./services/bookingService
      dockerfile: Dockerfile
    container_name: booking-service
    restart: always
    ports:
      - "8002:8002"
    env_file:
      - .env
    environment:
      EVENT_SERVICE_URL: "${EVENT_SERVICE_URL}"
      TICKET_SERVICE_URL: "${TICKET_SERVICE_URL}"
      BILLING_SERVICE_URL: "${BILLING_SERVICE_URL}"
      LOGGING_SERVICE_URL: "${LOGGING_SERVICE_URL}"
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOST}:5672/
      FRONTEND_URL: "${FRONTEND_URL}"
      AWS_COGNITO_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_COGNITO_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID}
      AWS_COGNITO_APP_CLIENT_ID: ${AWS_COGNITO_APP_CLIENT_ID}
    depends_on:
      rabbitmq:
        condition: service_healthy
      events-service:
        condition: service_started
      ticket-management-service:
        condition: service_started
      billing-service:
        condition: service_started
    networks:
      - default

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - default

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000" # Changed to 3001 to avoid conflict with frontend
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - default

  #Kong Database
  kong-database:
    image: postgres:16.2
    container_name: kong-database
    restart: always
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    ports:
      - "5438:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kong-data:/var/lib/postgresql/data
    networks:
      - default

  #Kong Migration
  kong-migration:
    image: kong:3.5
    container_name: kong-migration
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - default
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
    depends_on:
      kong-database:
        condition: service_healthy

  #Kong Gateway
  kong:
    image: kong:3.5
    container_name: kong-gateway
    restart: always
    networks:
      - default
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001 # This is important - internal port
      KONG_ADMIN_GUI_URL: http://localhost:8102
      # Add these lines to ensure Admin API is accessible
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002 # Internal port
      KONG_ADMIN_GUI_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_GUI_ERROR_LOG: /dev/stderr
      KONG_ADMIN_GUI: "on"
      KONG_ADMIN_GUI_API_URL: "http://localhost:8101"
      KONG_ADMIN_GUI_FLAGS: "null"
      KONG_ADMIN_CORS_ORIGINS: "*"
      KONG_ADMIN_CORS_METHODS: "GET, POST, PUT, PATCH, DELETE"
      KONG_ADMIN_CORS_HEADERS: "Content-Type, Authorization"
      KONG_ADMIN_CORS_EXPOSED_HEADERS: "X-Kong-Admin-Request-ID"
      KONG_ADMIN_CORS_CREDENTIALS: "true"
      KONG_ADMIN_CORS_MAX_AGE: "3600"

    depends_on:
      kong-migration:
        condition: service_completed_successfully
    ports:
      - "8100:8000" # Kong proxy port
      - "8101:8001" # Kong admin API
      - "8102:8002" # Kong admin GUI
      - "8443:8443" # Kong proxy SSL port
      - "8444:8444" # Kong admin SSL port
    volumes:
      - ./restore-kong.sh:/restore-kong.sh
      - ./kong:/kong
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 5
    command: >
      bash -c 'kong start && 
      chmod +x /restore-kong.sh && 
      sleep 30 && 
      /restore-kong.sh'

volumes:
  users-db-data:
  ticket-db-data:
  logging-db-data:
  events-db-data:
  billing-db-data:
  grafana-data:
  kong-data:
networks:
  default:
    name: IS213-project-default
